name: 経済学仮説生成システム（フィードバック機能付き）

on:
  # 定期実行: 毎日午前9時（JST）に実行
  schedule:
    - cron: '0 0 * * *'  # UTC 00:00 = JST 09:00
  
  # 手動トリガー: GitHub UIから手動実行可能
  workflow_dispatch:
    inputs:
      force_update:
        description: '強制更新フラグ'
        required: false
        default: 'false'
        type: boolean
      update_feedback_only:
        description: 'フィードバックのみ更新'
        required: false
        default: 'false'
        type: boolean
  
  # プッシュトリガー: masterブランチへのプッシュ時に実行
  push:
    branches: [ master ]
    paths:
      - 'scripts/**'
      - '.github/workflows/**'
  
  # Issueトリガー: フィードバックIssueが作成された時に実行
  issues:
    types: [opened, edited]

jobs:
  generate-hypotheses:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.update_feedback_only == 'false' || github.event.inputs.update_feedback_only == '' }}
    
    permissions:
      contents: write  # リポジトリへの書き込み権限
      pages: write     # GitHub Pagesへの書き込み権限
      id-token: write  # OIDC token権限
      issues: read     # Issueの読み取り権限
    
    steps:
    - name: リポジトリのチェックアウト
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Python環境のセットアップ
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Python依存関係のインストール
      run: |
        python -m pip install --upgrade pip
        pip install -r scripts/requirements.txt
    
    - name: 経済学仮説の生成
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        FRED_API_KEY: ${{ secrets.FRED_API_KEY }}
      run: |
        cd scripts
        python generate_hypotheses.py
        
        # 生成されたファイルを確認
        if [ -f "hypotheses.json" ]; then
          echo "✅ 仮説生成完了"
          cat hypotheses.json | jq '.total_hypotheses' || echo "JQ not available"
        else
          echo "❌ 仮説生成失敗"
          exit 1
        fi
    
    - name: フィードバックデータの更新
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
        GITHUB_REPOSITORY_NAME: ${{ github.event.repository.name }}
      run: |
        cd scripts
        python feedback_manager.py
        echo "📊 フィードバックデータ更新完了"
    
    - name: 生成結果をWebサイト用に配置
      run: |
        # 生成されたJSONファイルをpublicディレクトリにコピー
        mkdir -p public/data
        cp scripts/hypotheses.json public/data/
        
        # フィードバックデータもコピー（存在する場合）
        if [ -f "public/data/feedback_summary.json" ]; then
          echo "📊 フィードバックデータを配置"
        fi
        
        # 最終更新日時を記録
        echo "{\"last_updated\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\", \"includes_feedback\": true}" > public/data/metadata.json
        
        echo "📁 ファイル配置完了"
        ls -la public/data/
    
    - name: Node.js環境のセットアップ
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: フロントエンド依存関係のインストール
      run: npm ci
    
    - name: Reactアプリケーションのビルド
      run: |
        npm run build
        echo "🏗️ ビルド完了"
        ls -la dist/
    
    - name: ビルド成果物をアーティファクトとして準備
      run: |
        # GitHub Pagesデプロイ用のアーティファクトを作成
        tar -czf github-pages.tar.gz -C dist .
    
    - name: GitHub Pagesアーティファクトのアップロード
      uses: actions/upload-pages-artifact@v2
      with:
        path: dist
        # venvディレクトリを除外
        exclude: |
          economics_api/venv/
    
    - name: 変更をコミット・プッシュ
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # 変更があるかチェック
        if [ -n "$(git status --porcelain)" ]; then
          git add public/data/
          git add scripts/hypothesis_generator.log || true
          git commit -m "🤖 経済学仮説を自動生成・更新 $(date '+%Y-%m-%d %H:%M:%S')"
          git push
          echo "📤 変更をプッシュしました"
        else
          echo "📝 変更なし - プッシュをスキップ"
        fi
    
    - name: 実行結果の通知
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ 経済学仮説生成システムが正常に実行されました"
          echo "🌐 サイトURL: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
        else
          echo "❌ 実行中にエラーが発生しました"
        fi
    
    - name: アーティファクトのアップロード
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: hypothesis-generation-logs
        path: |
          scripts/hypothesis_generator.log
          scripts/hypotheses.json
          public/data/feedback_summary.json
        retention-days: 30

  # フィードバックのみ更新するジョブ
  update-feedback:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.update_feedback_only == 'true' || github.event_name == 'issues' }}
    
    permissions:
      contents: write  # リポジトリへの書き込み権限
      pages: write     # GitHub Pagesへの書き込み権限
      id-token: write  # OIDC token権限
      issues: read     # Issueの読み取り権限
    
    steps:
    - name: リポジトリのチェックアウト
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Python環境のセットアップ
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Python依存関係のインストール
      run: |
        python -m pip install --upgrade pip
        pip install requests
    
    - name: フィードバックデータの更新
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
        GITHUB_REPOSITORY_NAME: ${{ github.event.repository.name }}
      run: |
        cd scripts
        python feedback_manager.py
        echo "📊 フィードバックデータ更新完了"
    
    - name: フィードバックデータの配置
      run: |
        # フィードバックデータが生成されているか確認
        if [ -f "public/data/feedback_summary.json" ]; then
          echo "📊 フィードバックデータを確認"
          cat public/data/feedback_summary.json | head -20
        fi
        
        # メタデータを更新
        echo "{\"last_updated\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\", \"feedback_only_update\": true}" > public/data/feedback_metadata.json
    
    - name: Node.js環境のセットアップ
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: フロントエンド依存関係のインストール
      run: npm ci
    
    - name: Reactアプリケーションのビルド
      run: |
        npm run build
        echo "🏗️ フィードバック更新ビルド完了"
    
    - name: GitHub Pagesアーティファクトのアップロード
      uses: actions/upload-pages-artifact@v2
      with:
        path: dist
    
    - name: 変更をコミット・プッシュ
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # 変更があるかチェック
        if [ -n "$(git status --porcelain)" ]; then
          git add public/data/
          git commit -m "📊 フィードバックデータを更新 $(date '+%Y-%m-%d %H:%M:%S')"
          git push
          echo "📤 フィードバック更新をプッシュしました"
        else
          echo "📝 フィードバックに変更なし"
        fi

  # GitHub Pagesのデプロイ
  deploy-pages:
    needs: [generate-hypotheses, update-feedback]
    if: always() && (needs.generate-hypotheses.result == 'success' || needs.update-feedback.result == 'success')
    runs-on: ubuntu-latest
    
    permissions:
      pages: write
      id-token: write
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: GitHub Pagesへのデプロイ
      id: deployment
      uses: actions/deploy-pages@v2

  # フィードバック通知ジョブ
  notify-feedback:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'issues' && contains(github.event.issue.labels.*.name, 'feedback') }}
    
    permissions:
      issues: write
    
    steps:
    - name: フィードバック受信通知
      uses: actions/github-script@v7
      with:
        script: |
          const issueNumber = context.issue.number;
          const issueTitle = context.payload.issue.title;
          
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: issueNumber,
            body: `🙏 フィードバックをありがとうございます！

このフィードバックは自動的に処理され、システムに反映されます。

- **処理状況**: 受信完了 ✅
- **反映予定**: 次回の自動更新時（毎日午前9時）
- **確認方法**: [Webサイト](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}) で確認できます

ご協力いただき、ありがとうございました！`
          });
          
          // フィードバックラベルを追加（まだない場合）
          await github.rest.issues.addLabels({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: issueNumber,
            labels: ['feedback', 'processed']
          });





